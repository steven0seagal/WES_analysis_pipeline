name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 shellcheck-py pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

    - name: Lint shell scripts
      run: |
        find scripts/ -name "*.sh" -exec shellcheck {} \;

    - name: Check Python formatting
      run: |
        black --check --diff .

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Conda environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: environment.yml
        activate-environment: wes-analysis

    - name: Validate environment
      run: |
        conda list
        which bwa samtools gatk fastqc

    - name: Run basic validation
      run: |
        bash scripts/validate_installation.sh

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: wes-pipeline:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material

    - name: Build documentation
      run: |
        # If using MkDocs
        # mkdocs build

        # For now, just validate markdown
        find . -name "*.md" -exec markdownlint {} \;